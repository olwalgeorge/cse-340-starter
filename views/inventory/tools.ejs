<h1 class="page-title"><%= title %></h1>
  
  <% if (errors) { %>
    <div class="notice error-notice">
      <% errors.forEach(error => { %>
        <p><%= error %></p>
      <% }); %>
    </div>
  <% } %>

  <div class="dashboard-grid">
    <!-- Data Management Tools -->
    <div class="dashboard-card">      <div class="card-header">
        <span class="icon" aria-hidden="true">🗄️</span>
        <h2>Data Management</h2>
      </div>
      <div class="card-content">
        <p class="card-description">Tools for managing your inventory data and maintaining data integrity.</p>        <div class="tool-buttons">
          <button type="button" class="btn btn-secondary" onclick="validateData()">
            <span class="icon" aria-hidden="true">✅</span>
            Validate Data Integrity
          </button>
          <button type="button" class="btn btn-secondary" onclick="cleanupData()">
            <span class="icon" aria-hidden="true">🧹</span>
            Clean Up Orphaned Records
          </button>
          <button type="button" class="btn btn-secondary" onclick="optimizeDatabase()">
            <span class="icon" aria-hidden="true">⚡</span>
            Optimize Database
          </button>
        </div>
      </div>
    </div>

    <!-- Bulk Operations -->
    <div class="dashboard-card">      <div class="card-header">
        <span class="icon" aria-hidden="true">📋</span>
        <h2>Bulk Operations</h2>
      </div>
      <div class="card-content">
        <p class="card-description">Perform operations on multiple inventory items at once.</p>        <div class="tool-buttons">
          <button type="button" class="btn btn-secondary" onclick="bulkPriceUpdate()">
            <span class="icon" aria-hidden="true">💰</span>
            Bulk Price Update
          </button>
          <button type="button" class="btn btn-secondary" onclick="bulkStatusUpdate()">
            <span class="icon" aria-hidden="true">🔄</span>
            Bulk Status Update
          </button>
          <button type="button" class="btn btn-warning" onclick="bulkDelete()">
            <span class="icon" aria-hidden="true">🗑️</span>
            Bulk Delete (Caution)
          </button>
        </div>
      </div>
    </div>

    <!-- Import/Export Tools -->
    <div class="dashboard-card">      <div class="card-header">
        <span class="icon" aria-hidden="true">⇄</span>
        <h2>Import/Export</h2>
      </div>
      <div class="card-content">
        <p class="card-description">Import and export inventory data in various formats.</p>        <div class="tool-buttons">
          <label for="csv-import" class="btn btn-primary">
            <span class="icon" aria-hidden="true">📤</span>
            Import CSV
            <input type="file" id="csv-import" accept=".csv" style="display: none;" onchange="importCSV(this)">
          </label>
          <button type="button" class="btn btn-secondary" onclick="exportInventory()">
            <span class="icon" aria-hidden="true">📥</span>
            Export All Data
          </button>
          <button type="button" class="btn btn-secondary" onclick="generateBackup()">
            <span class="icon" aria-hidden="true">💾</span>
            Generate Backup
          </button>
        </div>
      </div>
    </div>

    <!-- System Maintenance -->    <div class="dashboard-card">
      <div class="card-header">
        <span class="icon" aria-hidden="true">⚙️</span>
        <h2>System Maintenance</h2>
      </div>
      <div class="card-content">
        <p class="card-description">Tools for system maintenance and optimization.</p>        <div class="tool-buttons">
          <button type="button" class="btn btn-secondary" onclick="clearCache()">
            <span class="icon" aria-hidden="true">🧽</span>
            Clear Cache
          </button>
          <button type="button" class="btn btn-secondary" onclick="updateThumbnails()">
            <span class="icon" aria-hidden="true">🖼️</span>
            Regenerate Thumbnails
          </button>
          <button type="button" class="btn btn-secondary" onclick="runHealthCheck()">
            <span class="icon" aria-hidden="true">💓</span>
            System Health Check
          </button>
        </div>
      </div>
    </div>

    <!-- Backup & Recovery -->
    <div class="dashboard-card">      <div class="card-header">
        <span class="icon" aria-hidden="true">🛡️</span>
        <h2>Backup & Recovery</h2>
      </div>
      <div class="card-content">
        <p class="card-description">Manage backups and data recovery options.</p>        <div class="tool-buttons">
          <button type="button" class="btn btn-success" onclick="createBackup()">
            <span class="icon" aria-hidden="true">➕</span>
            Create Backup
          </button>
          <button type="button" class="btn btn-secondary" onclick="viewBackups()">
            <span class="icon" aria-hidden="true">📋</span>
            View Backups
          </button>
          <button type="button" class="btn btn-warning" onclick="restoreBackup()">
            <span class="icon" aria-hidden="true">↶</span>
            Restore from Backup
          </button>
        </div>
      </div>
    </div>

    <!-- Navigation -->
    <div class="dashboard-card">      <div class="card-header">
        <span class="icon" aria-hidden="true">←</span>
        <h2>Navigation</h2>
      </div>
      <div class="card-content">        <div class="tool-buttons">
          <a href="/inv" class="btn btn-primary">
            <span class="icon" aria-hidden="true">📊</span>
            Back to Management Dashboard
          </a>
          <a href="/inv/report" class="btn btn-secondary">
            <span class="icon" aria-hidden="true">📈</span>
            View Reports
          </a>
        </div>
      </div>
    </div>
  </div>
  <!-- Enhanced Animated Status Modal -->
  <div id="status-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3 id="modal-title">Processing...</h3>
        <button class="modal-close" onclick="closeModal()" aria-label="Close modal">&times;</button>
      </div>
      <div class="modal-body">
        <div class="modal-icon" id="modal-icon">⚙️</div>
        <p class="modal-message" id="modal-message">Please wait while the operation completes.</p>
        <div class="progress-container" id="progress-container">
          <div class="progress-bar">
            <div class="progress-fill" id="progress-fill"></div>
          </div>
          <div class="progress-text" id="progress-text">0%</div>
        </div>
        <div class="status-indicator" id="status-indicator" style="display: none;">
          <span id="status-text">Operation completed successfully</span>
        </div>
      </div>
      <div class="modal-actions" id="modal-actions" style="display: none;">
        <button class="btn btn-secondary" onclick="closeModal()">Close</button>
      </div>
    </div>
  </div>

<script>
// Enhanced Modal functions with animations and progress
function showModal(title, message, icon = '⚙️', type = 'info') {
  const modal = document.getElementById('status-modal');
  const modalTitle = document.getElementById('modal-title');
  const modalMessage = document.getElementById('modal-message');
  const modalIcon = document.getElementById('modal-icon');
  const progressContainer = document.getElementById('progress-container');
  const progressFill = document.getElementById('progress-fill');
  const progressText = document.getElementById('progress-text');
  const statusIndicator = document.getElementById('status-indicator');
  const modalActions = document.getElementById('modal-actions');

  // Reset modal state
  modalTitle.textContent = title;
  modalMessage.textContent = message;
  modalIcon.textContent = icon;
  modalIcon.className = `modal-icon ${type}`;
  progressContainer.style.display = 'block';
  statusIndicator.style.display = 'none';
  modalActions.style.display = 'none';
  progressFill.style.width = '0%';
  progressText.textContent = '0%';

  // Show modal with animation
  modal.classList.add('show');
  
  // Start progress animation
  animateProgress();
}

function animateProgress() {
  const progressFill = document.getElementById('progress-fill');
  const progressText = document.getElementById('progress-text');
  let progress = 0;
  
  const interval = setInterval(() => {
    progress += Math.random() * 15 + 5; // Random progress increments
    if (progress > 100) progress = 100;
    
    progressFill.style.width = progress + '%';
    progressText.textContent = Math.round(progress) + '%';
    
    if (progress >= 100) {
      clearInterval(interval);
    }
  }, 200);
}

function showSuccess(message) {
  const progressContainer = document.getElementById('progress-container');
  const statusIndicator = document.getElementById('status-indicator');
  const statusText = document.getElementById('status-text');
  const modalActions = document.getElementById('modal-actions');
  const modalIcon = document.getElementById('modal-icon');

  progressContainer.style.display = 'none';
  statusIndicator.className = 'status-indicator success';
  statusIndicator.style.display = 'flex';
  statusText.textContent = message;
  modalActions.style.display = 'flex';
  modalIcon.className = 'modal-icon success';
  modalIcon.textContent = '✅';
}

function showError(message) {
  const progressContainer = document.getElementById('progress-container');
  const statusIndicator = document.getElementById('status-indicator');
  const statusText = document.getElementById('status-text');
  const modalActions = document.getElementById('modal-actions');
  const modalIcon = document.getElementById('modal-icon');

  progressContainer.style.display = 'none';
  statusIndicator.className = 'status-indicator error';
  statusIndicator.style.display = 'flex';
  statusText.textContent = message;
  modalActions.style.display = 'flex';
  modalIcon.className = 'modal-icon error';
  modalIcon.textContent = '❌';
}

function showWarning(message) {
  const progressContainer = document.getElementById('progress-container');
  const statusIndicator = document.getElementById('status-indicator');
  const statusText = document.getElementById('status-text');
  const modalActions = document.getElementById('modal-actions');
  const modalIcon = document.getElementById('modal-icon');

  progressContainer.style.display = 'none';
  statusIndicator.className = 'status-indicator warning';
  statusIndicator.style.display = 'flex';
  statusText.textContent = message;
  modalActions.style.display = 'flex';
  modalIcon.className = 'modal-icon warning';
  modalIcon.textContent = '⚠️';
}

function closeModal() {
  const modal = document.getElementById('status-modal');
  modal.classList.remove('show');
}

// Enhanced Tool functions with better UX
function validateData() {
  showModal('Data Validation', 'Validating data integrity...', '🔍', 'info');
  
  setTimeout(() => {
    showSuccess('Data validation completed successfully. No issues found.');
  }, 2500);
}

function cleanupData() {
  if (confirm('This will remove orphaned records. Are you sure?')) {
    showModal('Data Cleanup', 'Cleaning up orphaned records...', '🧹', 'warning');
    
    setTimeout(() => {
      showSuccess('Cleanup completed. 0 orphaned records removed.');
    }, 2000);
  }
}

function optimizeDatabase() {
  showModal('Database Optimization', 'Optimizing database performance...', '⚡', 'info');
  
  setTimeout(() => {
    showSuccess('Database optimization completed successfully.');
  }, 3500);
}

function bulkPriceUpdate() {
  const percentage = prompt('Enter price adjustment percentage (e.g., 5 for 5% increase, -10 for 10% decrease):');
  if (percentage !== null && !isNaN(percentage)) {
    showModal('Bulk Price Update', `Updating prices by ${percentage}%...`, '💰', 'info');
    
    setTimeout(() => {
      showSuccess(`Price update completed for all vehicles.`);
    }, 3000);
  }
}

function bulkStatusUpdate() {
  showModal('Bulk Status Update', 'Updating vehicle statuses...', '🔄', 'info');
  
  setTimeout(() => {
    showSuccess('Status update completed successfully.');
  }, 2000);
}

function bulkDelete() {
  if (confirm('WARNING: This will permanently delete selected records. This action cannot be undone. Continue?')) {
    showModal('Bulk Delete', 'Processing deletion request...', '🗑️', 'warning');
    
    setTimeout(() => {
      showWarning('Bulk deletion completed. Please review the changes.');
    }, 2500);
  }
}

function importCSV(input) {
  if (input.files && input.files[0]) {
    showModal('CSV Import', 'Processing CSV file...', '📤', 'info');
    
    setTimeout(() => {
      showSuccess('CSV import completed successfully.');
    }, 3000);
  }
}

function exportInventory() {
  showModal('Data Export', 'Generating export file...', '📥', 'info');
  
  setTimeout(() => {
    showSuccess('Export completed. Download will begin shortly.');
    // In a real implementation, this would trigger a file download
  }, 2500);
}

function generateBackup() {
  showModal('Backup Generation', 'Creating system backup...', '💾', 'info');
  
  setTimeout(() => {
    showSuccess('Backup created successfully.');
  }, 3500);
}

function clearCache() {
  showModal('Cache Management', 'Clearing system cache...', '🧽', 'info');
  
  setTimeout(() => {
    showSuccess('Cache cleared successfully. System performance improved.');
  }, 1500);
}

function updateThumbnails() {
  showModal('Thumbnail Update', 'Regenerating vehicle thumbnails...', '🖼️', 'info');
  
  setTimeout(() => {
    showSuccess('Thumbnail regeneration completed.');
  }, 4500);
}

function runHealthCheck() {
  showModal('Health Check', 'Running system health check...', '💓', 'info');
  
  setTimeout(() => {
    showSuccess('Health check completed. All systems operational.');
  }, 3000);
}

function createBackup() {
  showModal('Backup Creation', 'Creating new backup...', '🛡️', 'info');
  
  setTimeout(() => {
    showSuccess('Backup created successfully and stored securely.');
  }, 3500);
}

function viewBackups() {
  showModal('Backup List', 'Loading backup information...', '📋', 'info');
  
  setTimeout(() => {
    showSuccess('Available backups:\n• backup_2024_01_15.sql\n• backup_2024_01_10.sql\n• backup_2024_01_05.sql');
  }, 1000);
}

function restoreBackup() {
  if (confirm('WARNING: Restoring from backup will overwrite current data. Are you sure?')) {
    showModal('Backup Restoration', 'Restoring from backup...', '↶', 'warning');
    
    setTimeout(() => {
      showSuccess('Backup restoration completed successfully.');
    }, 4500);
  }
}

// Close modal when clicking outside of it
window.onclick = function(event) {
  const modal = document.getElementById('status-modal');
  if (event.target === modal) {
    closeModal();
  }
}

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    closeModal();
  }
});
</script>
